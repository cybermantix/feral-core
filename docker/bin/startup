#!/usr/bin/env bash

set -e
echo -e "\n\n --------- INIT -----------\n\n"
echo "ENV:     Init App Environment: ${APP_ENV}"
if [[ "${APP_ENV}" = "dev" ]]; then
  echo "XDBUG:   Adding Alias for XDebug PHP."
  echo 'alias xphp="php -dxdebug.mode=debug -dxdebug.start_with_request=yes $1"' >> ~/.bashrc
fi

echo -e "\n\n --------- START -----------\n\n"
if [ -z "${PROJECTNAME}" ]; then
    figlet "CHANGE ME"
    echo -e "NOTE:    Add your PROJECTNAME to the .env file."
else
    figlet ${PROJECTNAME}
fi

echo "User:"
whoami
echo "PHP VERSION:"
php -v
php -i | grep memory
echo "COMPOSER VERSION:"
composer -V


#tail -f /opt/app/docker/Makefile
#exit 1;

echo "Go for Start"

# Install PHP dependencies. Static assets installation and cache clear/warm
# invoked via post-autoload-dump scripts in composer.json
if [[ -f composer.json ]]; then
  echo "Creating development autoload files..."
  if [[ "${APP_ENV}" = "prod" ]]; then
      php -d memory_limit=-1 composer update --no-dev --no-autoloader --no-scripts
      composer dump-autoload -o --apcu
      bin/console cache:clear
  else
      composer update
      composer install --prefer-dist
  fi
else
  echo "No composer.json found, skipping composer install and auto load."
fi

echo "Test Point 2"

if [[ -d /opt/app/var/cache/dev/profiler ]]; then
   rm -Rf /opt/app/var/cache/dev/profiler/*
   echo "Cleared the profiler cache"
fi

echo "Test Point 3"

if [[ "${APP_ENV}" = "test" ]]; then
    echo "Checking code style..."
    ./vendor/bin/phpcs --runtime-set ignore_warnings_on_exit 1

    echo "Running unit test suite..."
    /usr/bin/php -dxdebug.mode=off vendor/bin/phpunit tests/Unit

    echo "Running functional test suite..."
    /usr/bin/php -dxdebug.mode=off vendor/bin/phpunit tests/Functional
elif [[ "${APP_ENV}" = "prod" ]] || [[ "${APP_ENV}" = "dev" ]]; then
    echo "Starting ${APP_ENV} in PHP-FPM service."
    php-fpm
else
    echo "Invalid APP_ENV: ${APP_ENV}. Options: dev|test|prod"
fi

